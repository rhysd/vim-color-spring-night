use crate::palette::Palette;
use std::fmt;
use std::io::{Result, Write};

#[derive(Clone, Copy, Debug)]
enum Brightness {
    Dim,
    Normal,
    Bright,
}

impl fmt::Display for Brightness {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::Dim => write!(f, "dim"),
            Self::Normal => write!(f, "normal"),
            Self::Bright => write!(f, "bright"),
        }
    }
}

#[derive(Debug)]
struct AnsiColors<'a> {
    brightness: Brightness,
    black: &'a str,
    red: &'a str,
    green: &'a str,
    yellow: &'a str,
    blue: &'a str,
    magenta: &'a str,
    cyan: &'a str,
    white: &'a str,
}

#[derive(Debug)]
struct ForegroundColors<'a> {
    dim: &'a str,
    normal: &'a str,
    bright: &'a str,
    hint_head: &'a str,
    hint_tail: &'a str,
}

#[derive(Debug)]
struct BackgroundColors<'a> {
    normal: &'a str,
    search: &'a str,
    search_focus: &'a str,
    footer_bar: &'a str,
    line_indicator: &'a str,
    hint_head: &'a str,
    hint_tail: &'a str,
}

#[derive(Debug)]
pub struct AlacrittyTheme<'a> {
    palette: &'a Palette,
    fg: ForegroundColors<'a>,
    bg: BackgroundColors<'a>,
    dim: AnsiColors<'a>,
    normal: AnsiColors<'a>,
    bright: AnsiColors<'a>,
}

impl<'a> AlacrittyTheme<'a> {
    pub fn new(palette: &'a Palette) -> Self {
        Self {
            palette,
            fg: ForegroundColors {
                dim: "yellow",
                normal: "fg",
                bright: "fg",
                hint_head: "bg",
                hint_tail: "bg",
            },
            bg: BackgroundColors {
                normal: "bg",
                search: "sakura",
                search_focus: "kakezakura",
                footer_bar: "bgstrong",
                line_indicator: "yaezakura",
                hint_head: "mikan",
                hint_tail: "orange",
            },
            dim: AnsiColors {
                brightness: Brightness::Dim,
                black: "black",
                red: "mildred",
                green: "darkgreen",
                yellow: "dullgold",
                blue: "blue",
                magenta: "fuchsia",
                cyan: "cloudy",
                white: "gray",
            },
            normal: AnsiColors {
                brightness: Brightness::Normal,
                black: "black",
                red: "crimson",
                green: "green",
                yellow: "gold",
                blue: "blue",
                magenta: "purple",
                cyan: "skyblue",
                white: "white",
            },
            bright: AnsiColors {
                brightness: Brightness::Bright,
                black: "gray",
                red: "red",
                green: "lime",
                yellow: "yellow",
                blue: "paleblue",
                magenta: "purple",
                cyan: "sunny",
                white: "white",
            },
        }
    }

    fn color(&self, name: &str) -> &'_ str {
        self.palette[name].gui.normal()
    }

    fn write_header_comment(&self, w: &mut impl Write) -> Result<()> {
        writeln!(
            w,
            r#"# Alacritty theme for spring-night colorscheme
#
# Author: rhysd <lin90162@yahoo.co.jp>
# License: MIT
#   Copyright (c) 2016 rhysd
#
# PLEASE DO NOT MODIFY THIS FILE DIRECTLY!
# Generated by script vim-color-spring-night/gen/{file}"#,
            file = file!(),
        )
    }

    #[rustfmt::skip]
    fn write_primary_section(&self, w: &mut impl Write) -> Result<()> {
        writeln!(w)?;
        writeln!(w, "[colors.primary]")?;
        writeln!(w, "background = \"{}\"",        self.color(self.bg.normal))?;
        writeln!(w, "foreground = \"{}\"",        self.color(self.fg.normal))?;
        writeln!(w, "dim_foreground = \"{}\"",    self.color(self.fg.dim))?;
        writeln!(w, "bright_foreground = \"{}\"", self.color(self.fg.bright))
    }

    #[rustfmt::skip]
    fn write_ansi_colors_section(&self, w: &mut impl Write, colors: &AnsiColors<'a>) -> Result<()> {
        writeln!(w)?;
        writeln!(w, "[colors.{}]",      colors.brightness)?;
        writeln!(w, "black = \"{}\"",   self.color(colors.black))?;
        writeln!(w, "red = \"{}\"",     self.color(colors.red))?;
        writeln!(w, "green = \"{}\"",   self.color(colors.green))?;
        writeln!(w, "yellow = \"{}\"",  self.color(colors.yellow))?;
        writeln!(w, "blue = \"{}\"",    self.color(colors.blue))?;
        writeln!(w, "magenta = \"{}\"", self.color(colors.magenta))?;
        writeln!(w, "cyan = \"{}\"",    self.color(colors.cyan))?;
        writeln!(w, "white = \"{}\"",   self.color(colors.white))
    }

    fn write_search_section(&self, w: &mut impl Write) -> Result<()> {
        writeln!(w)?;
        writeln!(w, "[colors.search]")?;
        writeln!(
            w,
            r#"matches = {{ foreground = "{fg}", background = "{bg}" }}"#,
            fg = self.color(self.fg.normal),
            bg = self.color(self.bg.search),
        )?;
        writeln!(
            w,
            r#"focused_match = {{ foreground = "{fg}", background = "{bg}" }}"#,
            fg = self.color(self.fg.bright),
            bg = self.color(self.bg.search_focus),
        )
    }

    fn write_single_color_section(
        &self,
        w: &mut impl Write,
        name: &str,
        fg: &str,
        bg: &str,
    ) -> Result<()> {
        writeln!(w)?;
        writeln!(w, "[colors.{name}]")?;
        writeln!(w, "foreground = \"{}\"", &self.color(fg))?;
        writeln!(w, "background = \"{}\"", &self.color(bg))
    }

    fn write_footer_bar_section(&self, w: &mut impl Write) -> Result<()> {
        self.write_single_color_section(w, "footer_bar", self.fg.normal, self.bg.footer_bar)
    }

    fn write_line_indicator_section(&self, w: &mut impl Write) -> Result<()> {
        self.write_single_color_section(w, "line_indicator", self.fg.normal, self.bg.line_indicator)
    }

    fn write_hints_section(&self, w: &mut impl Write) -> Result<()> {
        writeln!(w)?;
        writeln!(w, "[colors.hints]")?;
        writeln!(
            w,
            r#"start = {{ foreground = "{fg}", background = "{bg}" }}"#,
            fg = self.color(self.fg.hint_head),
            bg = self.color(self.bg.hint_head),
        )?;
        writeln!(
            w,
            r#"end = {{ foreground = "{fg}", background = "{bg}" }}"#,
            fg = self.color(self.fg.hint_tail),
            bg = self.color(self.bg.hint_tail),
        )
    }

    pub fn write_to(&self, w: &mut impl Write) -> Result<()> {
        self.write_header_comment(w)?;
        self.write_primary_section(w)?;
        for colors in [&self.dim, &self.normal, &self.bright] {
            self.write_ansi_colors_section(w, colors)?;
        }
        self.write_search_section(w)?;
        self.write_footer_bar_section(w)?;
        self.write_line_indicator_section(w)?;
        self.write_hints_section(w)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use regex::Regex;
    use std::str;
    use toml_edit::{DocumentMut, Item as TomlItem, Value as TomlValue};

    #[test]
    fn test_default_alacritty_theme() {
        let p = Palette::default();
        let w = AlacrittyTheme::new(&p);
        let mut out = vec![];
        w.write_to(&mut out).unwrap();
        let src = str::from_utf8(&out).unwrap();
        let doc: DocumentMut = src.parse().expect(src);

        let hex_color = Regex::new(r"^#[[:xdigit:]]{6}$").unwrap();
        let assert_color = move |path: &str| {
            let mut item = doc.as_item();
            for idx in path.split('.') {
                item = item.get(idx).expect(path);
            }
            let TomlItem::Value(v) = item else {
                panic!("{path} is not a primitive: {item:?}");
            };
            let TomlValue::String(s) = v else {
                panic!("{path} is not a string: {v:?}");
            };
            let s = s.value().as_str();
            assert!(hex_color.is_match(s), "{path} is not a hex color: {s:?}");
        };

        for path in [
            "foreground",
            "background",
            "dim_foreground",
            "bright_foreground",
        ] {
            assert_color(&format!("colors.primary.{path}"));
        }

        for mode in ["dim", "normal", "bright"] {
            for color in [
                "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white",
            ] {
                assert_color(&format!("colors.{mode}.{color}"));
            }
        }

        for section in [
            "search.matches",
            "search.focused_match",
            "footer_bar",
            "line_indicator",
        ] {
            for color in ["foreground", "background"] {
                assert_color(&format!("colors.{section}.{color}"));
            }
        }
    }
}
